Le but de cette scéance était de trouver un moyen simple d'asservir les moteurs pour qu'il tourne précisément à la vitesse demander, sans marge d'erreur, et cela à l'aide des encodeurs.
  Après beaucoup de recherche j'ai finis par en tirer un programme (moteurs_avec_encodeurs) qui devrait forcer le moteur à tourner précisément à la vitesse demanée.Le principe est assez simple, à l'aide des encodeurs on détermine la différence entre la nombre de tour de roue demandé et le nombre de tour réellement effectué. Ensuite, on corrige proportionellement à l'erreur:
l.58:	commande = Kp * erreur    //kp est un coefficient à déterminer manuellement, les nombres pour l'instant présent dans le programme ne correspondent pas forcément à mes moteurs.
Mais cela ne suffit pas à avoir une correction suffisament précise, il y aura toujours beaucoup d'oscillation, ainsi, il faut corriger l'erreur en fonction des erreurs précédentes également.
l.58 commande =  Kp * erreur + Ki * somme_erreurs  //ki est un coefficient différent de kp et également déterminer en tatonnant.
	Pour être plus performant enfin, on veut limiter les variations le plus possible, pour stabiliser au plus vite le moteur à la bonne vitesse. Ces variations sont proportionnelles à la dérivés de l'erreur, qui peut localement être associé à (erreur-erreur_précédente).
l.58 commande = Kp * erreur + Ki * somme_erreurs + Kd * (erreur - erreur_précédente) //kd différent de kp et de ki
Ainsi, dans cette simple ligne de commande, se trouve la correction de l'erreur. 


	Il ne reste plus qu'à appliquer cette correction en quasi-permanence et de manière sous-jacente: il faut répéter l'asservissement toutte les X milisecondes et ne pas déranger le reste du programme ce-faisant. C'est à cela que sert la librairie SimpleTimer, qui offre des fonctions permettant de régler ce problèmes:
l.35: timer.setInterval(1000/frequence_echantillonage, asservissement) //frequence_echantillonage se detérmine arbitrairement mais doit être ni trop long (pour corriger le moteurs le plus souvent possible) ni trop court (il faut laisser le temps de calculer une réctification).
Cette ligne permet, toute les  1000/frquence_echantillonage ms, d'interrompre le calcul de la correction et d'effectuer l'asservissement.


Un dernier problème persiste: la librairie n'est pas reconnu par arduino et je ne comprends pas encore vraiment pourquoi. C'est ce qu'il faudra corriger pour la prochaine fois.
